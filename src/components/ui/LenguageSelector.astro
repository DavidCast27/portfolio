---
import ColombiaFlag from "../icons/flags/ColombiaFlag.astro";

import UniteStatesFlag from "../icons/flags/UniteStatesFlag.astro";
import ChevronIcon from "../icons/ChevronIcon.astro";

const { currentLocale = "es", url } = Astro;
const LOCALES: Record<
  string,
  { code: string; name: string; href: string; flag: typeof ColombiaFlag }
> = {
  en: {
    code: "en",
    href: `/en`,
    name: "English",
    flag: UniteStatesFlag,
  },
  es: {
    code: "es",
    href: "/es",
    name: "EspaÃ±ol",
    flag: ColombiaFlag,
  },
};

const currentLocaleData = LOCALES[currentLocale];
const otherLocales = Object.values(LOCALES).filter(
  (locale) => locale.code !== currentLocale,
);
const currentPath = url.pathname.replace(currentLocaleData.href, "");
---

<div class="relative inline-block text-left">
  <div
    class="group rounded text-sm font-semibold transition-all hover:bg-gray-300 dark:hover:bg-gray-800 border-2 border-black/10 dark:border-white/10"
  >
    <button
      type="button"
      class="inline-flex justify-start items-center w-full gap-x-2 px-3 py-2"
      aria-expanded="true"
      aria-haspopup="true"
    >
      <currentLocaleData.flag class="size-4" />
      {currentLocaleData.name}
      <ChevronIcon class="size-4 -mr-1" />
    </button>
    <ul
      class="group-hover:block group-hover:animate-fade-down group-hover:animate-duration-200 hidden absolute w-full"
    >
      {
        otherLocales.map((locale) => (
          <li class="">
            <a
              class="rounded hover:bg-gray-300 dark:hover:bg-gray-800 border-2 -mx-0.5 border-black/10 dark:border-white/10 whitespace-no-wrap inline-flex justify-start items-center w-full gap-x-2 px-3 py-2"
              href={`${locale.href}${currentPath}`}
            >
              <locale.flag class="size-4" />
              {locale.name}
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</div>
